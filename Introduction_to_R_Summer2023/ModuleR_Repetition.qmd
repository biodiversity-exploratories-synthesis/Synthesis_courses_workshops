---
title: "Module R: Repetition"
author: "N. V. Schenk"
format: 
    html:
      toc: true
      self-contained: true
editor: source
execute: 
  cache: true
---

```{r}
#| label: requirements
#| include: false
# load and install necessary R packages
# This is not shown in the html script.

# install necessary R packages
if(!require(dplyr)) install.packages("tidyverse")
# if(!require(cowplot)) install.packages("cowplot")

# load necessary R packages
library(tidyverse)
```


# Repetition of Module 1

This document is the collection of exercises you have submitted while solving Module 1.


## Checkpoint 1.1

::: {.panel-tabset}

### Exercise

Now create a new and much longer sequence of numbers from 111 to 222 by 0.02 steps. Save in a vector called c. 
Now substract the previous vector a from c.
What do you observe?
Can you explain?

```{r}
a <- seq(from = 1, to = 5, by = 1)
```


### Solution

```{r}
c <- seq(from = 111, to = 222, by = 0.02)
c - a
```

A warning message is shown, telling us that vector c is longer than vector a, and that vector c is recycled in order to do the calculation.

Additionally : The console does not show all entries of the vector, because the vector is too long : 
`[ reached getOption("max.print") -- omitted 4551 entries ]`
```{r}
getOption("max.print")
```
The option "max.print", i.e. the number of printed lines is set to 1000. This does not mean the vector can't be longer than 1000 elements long, but just that such a long vector is not shown completely in the console.


:::


::: {.panel-tabset}

### Exercise
Create a vector `x` which is a sequence from 10 to 90 step size 5. Create another vector `y` from 100 to 900 with step size 50. Add those two vectors.


### Solution

```{r}
x<- seq(from = 10, to = 90, by = 5)
y<- seq(from = 100, to = 900, by = 50)
x+y
```


:::


::: {.panel-tabset}

### Exercise

Create a sequence between 40 and a 160 with iterations of 2 and save them as vector 1

### Solution

```{r}
vec1=seq(from=40, to=160, by=2)
```


:::

::: {.panel-tabset}

### Exercise

Create two sequences of numbers. The first from 5 to 15 with iterations of 1. Save this sequence as variable a. The second sequence ranges from 0.5 to 1.5 with steps of 0.1. Save this as variable b. Then add the two variables

### Solution

```{r}
a=seq(from=5, to=15, by=1)
b=seq(from=0.5, to=1.5, by=0.1)
a+b
```

:::

::: {.panel-tabset}

### Exercise

Create two sequences of numbers : The first is a sequence of numbers from 1 to 5, with steps of 1. Save this sequence in a variable called a. The second sequence is a sequence of numbers from 0.1 to 0.3, with steps of 0.1. Save this sequence in a variable called b. Subtract a from b.


### Solution

```{r}
a<-seq(from = 1, to = 5, by = 1)
b<- seq(from = 0.1, to = 0.3, by = 0.1)
sum_ab<- b-a # R adjusts the length of b according the sequence of a and substracts the values correspondingly from each sequence.
sum_ab
```

:::






::: {.panel-tabset}

### Exercise

Create a sequence `year` of years between 1992 and 2023 and a sequence `month` of months between 1 and 12.

### Solution

```{r}
year <- seq(from = 1992,to = 2023,by = 1)
month <- seq(from = 1,to = 12,by = 1)
```


:::

::: {.panel-tabset}

### Exercise

Create three sequences of numbers : The first is a sequence of numbers from 0 to 5, with steps of 1. Save this sequence in a variable called a. The second sequence is a sequence of numbers from 0 to 2.5, with steps of 0.5. Save this sequence in a variable called b. The third sequence is a sequence of numbers from 0 to 0.5, with steps of 0.1. Save this sequence in a variable called c.
Add a the sequences a and b, then divide by sequence c.

### Solution
```{r}
a <- seq(from = 0, to = 5, by = 1)
b <- seq(from = 0, to = 2.5, by = 0.5)
c <- seq(from = 0, to = 0.5, by = 0.1)
(a+b)/c
```
Note that the first result is NaN which stands for "Not a number" and indicates division by zero. The first element of c is zero.

:::

::: {.panel-tabset}

### Exercise

Create two vectors `a` and `b` : a is a sequence from 1 to 240 with sep size 1. `b` is the square of `a`. Plot the relation of those two vectors (1) using R base and (2) using ggplot2.

### Solution

```{r}
a <- seq(from = 1, to = 240, by = 1)
b <- a^2
plot(a, b)
ggplot(data.frame(a, b), aes(x = a, y = b)) + 
  geom_line()
```


:::

::: {.panel-tabset}

### Exercise

The operator `==` ("double-equal") checks if two elements (e.g. numbers) are the same.
```{r}
3 == 3 # by returning TRUE, R tells you that 3 is indeed the same as 3
3 == 4 # by returning FALSE, R tells you that 3 is NOT the same as 3
```

Create a vector a from 0 to 5 with step size 1. Create a second vector b from 0.1 to 0.3 with step size 0.1. Compare the lengths of vectors a and b, and check if the length is the same, by using the operator `==`


### Solution

```{r}
a <- seq(from = 0, to = 5, by = 1)
b <- seq(from = 0.1, to = 0.3, by = 0.1)

# checking the lengths of the two vectors by hand
length(a)
length(b)

# check if the length of vector a is the same as the length of vector b
length(a) == length(b)
# their lengths differ, because a is longer than b.
```

:::



::: {.panel-tabset}

### Exercise

The `>` operator tests if a given element (e.g. a number) is larger than another.

```{r}
3 > 1 # 3 is larger than 1
4 > 5 # 4 is NOT larger than 5
```

Use the operator `>` to check if vector a is longer than vector b.

### Solution

```{r}
length(a) > length(b)
```
Vector a is indeed longer than vector b.

**additionally**, you might have tried out this : 
```{r}
a > b
```
Here, the `>` operator is applied ELEMENTWISE, that means the first element of a is compared to the first element of b. In our case, 0 is compared to 0.1. 0 is not larger than 0.1, therefore the first answer is FALSE. Then, the second element of a is compared to the second element of b, i.e. 1 is compared to 0.2. 1 is larger than 0.2, therefore the second answer is TRUE. And so on.

*note* that again here, the vector b is "recycled", because it is not as long as a. That means, the fourth element of vector a is compared to the FIRST element of vector b.

:::



::: {.panel-tabset}

### Exercise

Create two sequences of numbers : The first is a sequence of numbers from 1 to 5, with steps of 1. Save this sequence in a variable called a. The second sequence is a sequence of numbers from 0.1 to 0.3, with steps of 0.1. Save this sequence in a variable called b. Subtract a from b.

### Solution

```{r}
a <- seq(from = 1, to = 5, by = 1)
b <- seq(from = 0.1, to = 0.3, by = 0.1)
sum <- b - a # R adjusts the length of b according the sequence of a and subtracts the values correspondingly from each sequence.
sum
```

:::


::: {.panel-tabset}

### Exercise

Create three sequences of numbers : The first is a sequence of numbers from 0 to 5, with steps of 1. Save this sequence in a variable called a. The second sequence is a sequence of numbers from 0 to 2.5, with steps of 0.5. Save this sequence in a variable called b. The third sequence is a sequence of numbers from 0 to 0.5, with steps of 0.1. Save this sequence in a variable called c.
Add a the sequences a and b, then divide by sequence c.


### Solution

```{r}
a <- seq(from = 0, to = 5, by = 1)
b <- seq(from = 0, to = 2.5, by = 0.5)
c <- seq(from = 0, to = 0.5, by = 0.1)
(a + b) / c
```
*note* that you get a `NaN`, the abbreviation for "not a number". This is the result of a division through zero, which is not defined. The first element of c is 0. 

:::


### Discussion insights

Insights discussed during the individual work or during the discussion sessions.

#### R recycling

In module 1, a shorter vector was recycled to fit the length of a longer vector.
```{r}
a <- seq(from = 1, to = 5, by = 1)
b <- seq(from = 0.1, to = 0.3, by = 0.1)
a + b
```

This recycling of vectors is a particularity of R, if you need to search about it's behaviour, you can refer to it by "R's recycling rules". 

R's recycling rules dictate that if the recycled vector fits neatly into the longer vector without partial recycling, no warning is emitted.

That means if vector a was 6 elements long, vector b would fit percetly two times (no splitting of vector b), and you do not get a warning : 
```{r}
a <- seq(from = 1, to = 6, by = 1)
b <- seq(from = 0.1, to = 0.3, by = 0.1)
a + b
```


#### overwriting vectors

By re-using a Vector's name, the former Vector is overwritten

#### Run R code without click

Ctrl + Enter

Run multiple lines at once : select the lines you want to run, Ctrl + Enter


#### Re-starting the graphics device

If plotting does not work any more, sometimes it helps to re-start the graphics device, using : 
```{r}
dev.off()
```
And trying to plot again.


## Checkpoint 1.2


::: {.panel-tabset}

### Exercise

Name 3 keyboard shortcuts you feel come in very handy

### Solution

Move cursor between script and console „ctrl + 1“ and „ctrl + 2“
Run the script „cmd + enter“
Run the script without moving cursor to the end „shift + enter“

:::

::: {.panel-tabset}

### Exercise

Create a diagram of two vectors : `x` is a sequence of 0 to 500 with step size 50. `y` is a sequence of vectors from 0 to 5000 with step size 500.

Create a diagram using (1) base R (2) the `qplot` function and (3) ggplot.

### Solution

```{r}
library(ggplot2)

x<- seq(from = 0, to = 500, by = 50)
y<- seq(from = 0, to = 5000, by = 500)

plot(x,y)

# x y Diagramm verschönern
qplot(x,y)

# x y Daten im Diagramm verbinden
ggplot(data.frame(x,y), aes(x,y)) + 
  geom_line()
```

:::


::: {.panel-tabset}

### Exercise

Create a new script and name it test_script4.R. Load the ggplot2 package.
Create a vector starting at 5 and ending at 125 with step 5. Save this as v1. 
Create a second vector named v2 that is the square root of vector1. 
Create a line plot using ggplot2.

### Solution
```{r}
library(ggplot2)
v1 <- seq(from=5, to=125, by=5)
v2=sqrt(v1)
ggplot(x=v1, y=v2)
ggplot(data.frame(v1,v2), aes(x=v1, y=v2)) + geom_line()
```

:::


::: {.panel-tabset}

### Exercise

.. (no exercise text provided, see solution for inspiration)

### Solution
```{r}
library(tidyverse)
c <- log10(2)+log10(4)+log10(6)+log10(8)+log10(10)
d <- seq(1:5)*(3/4)
plot(c)
plot(d)
length(c)
length(d)
```

:::



::: {.panel-tabset}

### Exercise

Explain what the `rm(list = ls())` call does.

### Solution

ls() inside rm(). The rm() stands for remove, and ls() stands for list. We combine them in the following way to make R 'clear' its brain.

:::

::: {.panel-tabset}

### Exercise

Creating a vector from 0 to 200 with stepsize 4, save it as a, create a second vector as the power of 3 plus 1 of vector a. Plot it.

### Solution

```{r}
a <- seq(from = 0, to = 200, by = 4)
b <- a^3 + 1
plot(a, b)
```

:::



::: {.panel-tabset}

### Exercise

Creating a vector of months and another one of temperatures. Plot it.

### Solution : Vectors
```{r}
months <- seq(from = 1, to = 12, by = 1)
temp <- seq(from = 29, to = 40, by = 1)
```


### Solution : Plots
```{r}
qplot(x = months, y = temp)
ggplot(data.frame(months,temp), aes(x = months, y = temp)) + geom_line()
```


:::

::: {.panel-tabset}

### Exercise

Create a vector from 0 to 100 with stepsize 1, and call it a. Create a second vector b, which is the logarithm of vector a.

Create a plot of vector a and b, by using the package ggplot2.

### Solution
```{r}
library(ggplot2)

a <- seq(from=0, to=100, by=1)
b <- log(a)

qplot(x = a, y = b)
ggplot(data.frame(a, b), aes(x = a, y = b)) + 
  geom_line()
```

:::



## Checkpoint 1.3

::: {.panel-tabset}

### Exercise

Create a vector A which is a sequence from 0 to $2 * \pi$ with step size 0.01.
Create a vector B which is the tangens of A.

Plot A and B.


### Solution
```{r}
A<-seq(from = 0, to = 2*pi, by = 0.01)
B<- tan(A) #cos(A)
plot(A,B)
qplot(x = A, y = B) #quickplot
ggplot(data.frame(A, B), aes(x = A, y = B)) + geom_line()
```

:::

::: {.panel-tabset}

### Exercise

Plot a cos graph. Create appropriate data to so so and plot it.

### Solution

```{r}
x <- seq(from = -20, to = 20, by = 0.5)
qplot(x = x, y = cos(x), geom = "line")
```
:::

::: {.panel-tabset}

### Exercise

Plot a histogram with random numbers between 1 and 1000. Create appropriate data to so so and plot it.

### Solution

```{r}
x <- sample(1:1000, 50)
hist(x)
```

:::


# Repetition of Module 2

## Checkpoint 2.1

::: {.panel-tabset}

### Exercise

Choose any plot you like and start playing around. Change colours, points, titles, etc. Use the internet or any other help function you wish.

Use the table `wdata` for this.
```{r}
set.seed(1234)
wdata = data.frame(
        gender = factor(rep(c("F", "M", "D"), each=200)),
        weight = c(rnorm(200, 55), rnorm(200, 58), c(rnorm(100, 55), rnorm(100, 58))))
head(wdata)
```


### Solution

Note that in order to run the below code, you need to install and load the `viridis` package : 

```{r}
# install.packages("viridis")
library(viridis)
```

```{r}
library(ggplot2)
# Combine violin and boxplot. Change colour of Boxplot and make it smaler then violin plot. Choose a colour scheme.
ggplot(data = wdata, aes(x = gender, y = weight, fill = gender)) + 
  geom_violin(width = 1.4) +
  geom_boxplot(width = 0.1, color="grey") +
  scale_fill_viridis(discrete = TRUE) +
  ggtitle("200 persons weight distribution")
```

:::


::: {.panel-tabset}

### Exercise

Under Solution, you find a sequence of code to create a histogram. Follow this code and try to find out what the individual commands do.

### Solution

In order to run the below code, you need to install the below package.
```{r, eval = F}
install.packages("viridis")
```

```{r}
#### Create Heatmap
# Library
library(ggplot2)

# Dummy data
# Library
library(ggplot2)

# Dummy data
x <- LETTERS[1:26]
y <- paste0("var", seq(1,26))
data <- expand.grid(X=x, Y=y)
data$Z <- runif(676, 0, 5)

# Heatmap 
ggplot(data, aes(X, Y, fill= Z)) + 
  geom_tile()

# change colour 
library(viridis)
ggplot(data, aes(X, Y, fill= Z)) + 
  geom_tile() +
  scale_fill_viridis(discrete=FALSE)
```

:::

::: {.panel-tabset}

### Exercise

visualize the relation between transmission type and mpg (mtcars data)

### Hint
load the `mtcars` data : 
```{r}
data(mtcars)
```


### Solution
```{r}
ggplot(mtcars, aes (x = am, y = mpg))+
  geom_boxplot() +
  scale_x_discrete(labels = c("Automatic", "Manual"))+
  labs (x = "Transmission Type", y = "Miles per Gallon") + theme_bw()
```

:::

::: {.panel-tabset}

### Exercise

construct a basic ridgeline plot with the Orange data frame. The `Orange` dataset is provided with the `ggridges` package. Install the package, and load the `Orange` dataset after.

### Hint

```{r, eval = F}
install.packages("ggridges")
data(Orange)
```


### Solution

```{r}
# Libraries
# install.packages("ggridges")
library(ggridges)
library(ggplot2)

# Creating the ridgeline plot
head(Orange)
ggplot(Orange, aes(x = age, y = Tree, fill = circumference)) +
  geom_density_ridges() +
  theme_ridges() +
  theme(legend.position = "none") +
  labs(title = "Growth of orange trees") 
```
:::

::: {.panel-tabset}

### Exercise (Advanced)

Note that for this exercise, you need to go to the Biodiversity Exploratories database BExIS and download a specific dataset.

create a soil texture triangle from the dataset 14686 of the BE. 

Creating  the texture classes triangle using ggtern

### Solution

```{r, eval = F}
# install.packages("readxl")
library(readxl)
soil_texture <- read_excel("C:/Users/Downloads/Copy of 14686_10_data.xlsx", 
                           sheet = "Data")
head(soil_texture)


# Creating subset from soil_texture
data_points <- subset(soil_texture, Type == "G", select = c(EP_Plotid, Exploratory, Clay...12, Silt, Sand))
head(data_points)

# Changing column names
colnames(data_points)[colnames(data_points) == "Clay...12"] <- "Clay"
head(data_points)

# Creating ternary plot
library("ggtern")
library("scales")
ggtern(data=data_points, aes(x = Clay, y = Silt, z = Sand, color = Clay, shape = Exploratory)) +
  scale_color_gradient(high = "red", low = "blue") +
  labs(title = "Soil texture triangle") +
  facet_grid(. ~ Exploratory) +
  geom_point()
```

:::

::: {.panel-tabset}

### Exercise

Create a boxplot of the "mpg" variable across the "cyl" variable using the dataset mtcars.

### Solution

```{r}
# Load necessary library
library(ggplot2)

# Load mtcars dataset
data(mtcars)

# Create a boxplot
ggplot(data = mtcars, aes(x = factor(cyl), y = mpg, fill= factor(cyl))) +
  geom_boxplot() +
  labs(title = "Boxplot of MPG by Number of Cylinders",
       x = "Number of Cylinders",
       y = "Miles per Gallon") 
```


:::





## Checkpoint 2.2

::: {.panel-tabset}

### Exercise

Visualize the distribution of the categorial variable species of the `iris` dataset in a faceted plot. Show the relation of sepal length and width

### Solution

```{r, eval = F}
view(iris)
?iris
```

```{r}
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +
  geom_point() +
  facet_wrap(~Species) +
  labs(title = "sepal shape in iris species",
       x = "seapl length",
       y = "sepal width")
```

:::



::: {.panel-tabset}

### Exercise

Create a scatter plot showing the relationship between tree height and tree volume using the "trees" dataset and add a line. 

### Solution

```{r, eval = F}
data("trees")

?trees
```

```{r}
ggplot(trees, aes(x = Height, y=Volume)) +
geom_point(aes(color=Height)) + geom_smooth(color="black")
```

:::


::: {.panel-tabset}

### Exercise

Work with the iris dataset. Visualise the relationship between the sepal width and petal length in addition to see if it is influenced by species

### Solution

```{r}
iris %>%
ggplot ( aes (x = Sepal.Width, y = Petal.Length, color = Species) )+
geom_point()+
geom_smooth()
```
:::

::: {.panel-tabset}

### Exercise

Create a density plot of the bill length of each species of penguins, using colorblind safe. Save the image as jpeg

### Solution

```{r, eval = F}
install.packages("palmerpenguins")
install.packages("ggthemes")
```


```{r}
library(tidyverse)
library(palmerpenguins)
library(ggthemes)
data(penguins)
glimpse(penguins)
ggplot(penguins, aes(x = bill_length_mm, color = species)) +
  geom_density(size = 1) +
  labs(color = "Species") +
  scale_color_colorblind()
```

```{r, eval = F}
ggsave(filename = "Bill_length.jpeg")
```


::: {.panel-tabset}

### Exercise

Create a scatterplot of bill length vs body mass of the penguin dataset, differentiating species by color and island by shape. Add a trendline without confidence interval.

### Solution

```{r}
ggplot(penguins, aes(x = body_mass_g, y = bill_length_mm)) +
  geom_point(aes(color = species, shape = island)) +
  geom_smooth(se = FALSE) +
  labs(title = "Correlation of bill length and body mass of penguins", color = "Species", shape = "Island") +
  scale_color_colorblind()
```

:::


::: {.panel-tabset}

### Exercise

From the penguin dataset, create a boxplot of species.

### Solution

```{r}
ggplot(penguins, aes(x = species, y = body_mass_g)) +
  geom_boxplot(fill = "green")
```

:::










## Checkpoint 2.3

::: {.panel-tabset}

### Exercise

What about the difference between na and NA? Is there any? Try the same exercise as above, but replace any number with „na“.

*Note* this question is abou the data reading exercises in Module 2, where you changed some values of a dataset to e.g. NA, and tested what happens in the read function.

### Solution

Interesting. Excel reads it as the same. 
But R makes a difference and doesn’t recognize na as actual missing values (like NA).

:::


::: {.panel-tabset}

### Exercise

Import the dataset gardens.csv from the Beckerman book using read.csv and setting the working directory as the datasets folder

### Solution
```{r, eval = F}
library(readr)

getwd()
setwd("C:/Users/Desktop/OneDrive - TUM/PhD/R_programming/Datasets/") # note this path is slightly changed to not show the name of the person writing the exercise
gardens <- read.csv("gardens.csv")

# Exercise: Import the dataset biomass.loss.csv with read_csv
biomass_loss <- read_csv("biomass.loss.csv")
```

:::


::: {.panel-tabset}

### Exercise

Import the dataset biomass.loss.csv from the Beckerman book with read_csv

### Solution

```{r, eval = F}
biomass_loss <- read_csv("biomass.loss.csv")
```

:::


## Checkpoint 2.4 (Additional)

::: {.panel-tabset}

### Exercise

Load the mtcars mtcars and tweak the following code to run smoothely

```{r, eval = F}
mtcars
?mtcars
libray(gglot)

ggplot(mtcas, aes(x=(hp), y=mpg))+
  geom_point()+geonm_smoooth("")
```


### Solution

```{r}
mtcars
?mtcars
library(ggplot2)

ggplot(mtcars, aes(x=hp, y=mpg))+
  geom_point()+geom_smooth()
```

:::

::: {.panel-tabset}

### Exercise

saving a plot as a pdf : Create a plot (any plot you like) and save it as pdf.

### Solution

```{r, eval = F}
my_scatter_plot <- ggplot(mpg, aes(x = cty, y = hwy)) + geom_point()

ggsave(filename = "mpg-plot.pdf", plot = my_scatter_plot)
```


:::

::: {.panel-tabset}

### Exercise

edit the following code for it to work

```{r, eval = F}
mpg

ggplot (aes (x = "displ" y = hwy) +

geom_point (color = class)+

geom_smooth ()
```


### Solution

```{r}
mpg %>%
ggplot (aes (x = displ, y = hwy)) +

geom_point (aes (color = class))+
  geom_smooth()
```

:::

::: {.panel-tabset}

### Exercise

tweak the following code to make it run correctly

```{r, eval = F}
library(palmerpenguins)
library(ggthemes)
ggplot(data = penguis, mapping = aes(x = body_mass_g, y = flipper_length_m)) + 
  geom_point() +
  geom_smooth(method = "lm")
  scale_color_colorblind()

```


### Solution

```{r}
library(palmerpenguins)
library(ggthemes)
ggplot(data = penguins, mapping = aes(x = body_mass_g, y = flipper_length_mm)) + 
  geom_point() +
  geom_smooth(method = "lm") +
  scale_color_colorblind()
```

:::

::: {.panel-tabset}

### Exercise

Read the "environment.csv" file in the datasets folder (from the Beckerman book) and look at the data using glimpse(), and create a line graph of altitude.m and temperature.C

### Solution

```{r}
environment <- read.csv("environment.csv")

library(dplyr)
glimpse(environment)

library(ggplot2)
ggplot(environment, aes(x = altitude.m, y = temperature.C)) +
  geom_line()
```

:::



# Repetition of Module 3

## Checkpoint 3.1

::: {.panel-tabset}

### Exercise

Now rearrange the table from back to front and then delete column a and filter for rows with 12 in c - all in one pipe.

```{r}
testdat1 <- tibble(a = c("A", "B", "B", "B", "C"), 
                   b = c(5, 4, 4, 2, 1),
                   c = c(12, 2, 3, 34, 12))
```


### Solution

```{r}
testdat1 |> 
  arrange(c,b,a) |> 
  select(c,b) |> 
  filter(c == 12)
```

:::

::: {.panel-tabset}

### Exercise

### Solution


:::


::: {.panel-tabset}

### Exercise
Load the data set cars and sort the cars by ascending fuel efficiency (mpg)
### Solution

```{r}
mtcars

?mtcars

mtcars |>  arrange(mpg)
```

:::

::: {.panel-tabset}

### Exercise

Create a subset of the mtcars dataset that only contains data on mpg and wt. 

### Solution
```{r}
mtcars |> count(mpg, wt)
```


:::

::: {.panel-tabset}

### Exercise

MEAN OF SPEEDS PER DAY. Flights that departed from June 1 to 3 from NYC to
Atlanta with departure delay of less than 1 hour, taking off after 8 am. 
Additional information: Speed in km/h instead of mph, each speed only
mentioned once. 73 options found.
No information on Carrier and Tail Number as well as air time through time_hour.

### Solution
```{r}
library(nycflights13)
flights |> 
  mutate(
    speed_kmh =distance / air_time * 60 *	1.61,
    .before = carrier
  ) |> 
  filter(month == 6 & day %in% c(1:3)) |> 
  filter(dest == "ATL") |> 
  group_by(day) |> 
  distinct(speed_kmh, .keep_all = T) |> 
  filter(dep_delay < 60) |> 
  arrange(dep_time < 0800) |> 
  select(!carrier:tailnum & !air_time:time_hour)
```

:::

::: {.panel-tabset}

### Exercise

Create a data frame. The first column in is a vector with: Ga, Ka, Sa, Ka, Pa.The second column has: 5,7,9,3,6. The third column has: Za, Ba, Ma, Ba, Ta. Remove the duplicated values from the first and third columns. which one is kept. Why?

### Solution

```{r}
data <- tibble (x=c("Ga","Ka","Sa","Ka","Pa"),
                y=c(5,7,9,3,6), 
                z=c("Za","Ba","Ma","Ba","Ta"))
distinct (data, x,z,.keep_all=TRUE)
```

The first value of the duplicated values from x and z. Here corresponds to 7 in the second column. The row with the value 3 from second column is omitted

:::









# Checkpoint 3.2

::: {.panel-tabset}

### Exercise

Show only the murders and assaults within the US using the USArrests dataset. Use base R coding.

### Solution

```{r}
USArrests
?USArrests

USArrests[,c("Murder", "Assault")]
```

:::

::: {.panel-tabset}

### Exercise

Give a summary of the various columns in the USArrests dataset

### Solution
```{r}
summary(USArrests)
```

:::


::: {.panel-tabset}

### Exercise

Add 2 new columns called Sepal.Lengthx.Width and Petal.Lengthx.Width to the iris dataset. Sepal.Lengthx.Width is (rectangular/ square area) of the sepal, and Petal.Lengthx.Width is the (rectangular/ suqare) area of the petal.

From the newly created dataset: 
- select only new variables and species.
- Select the subset of Data, where SLxW is greater than 23.

### Solution

```{r}
# Looked it up on www.statology.org anyways
# Adding 2 new columns called Sepal.Lengthx.Width and Petal.Lengthx.Width
# (Sure not equal to blossom surface, but maybe a proxy)
iris_s_p_lxw <- transform(iris, Sepal.Lengthx.Width = Sepal.Length * Sepal.Width,
                          iris, Petal.Lengthx.Width = Petal.Length * Petal.Width
                          )

sp_lxw <- iris_s_p_lxw[ , c("Species", "Sepal.Lengthx.Width", "Petal.Lengthx.Width")]
head(sp_lxw)

subset(sp_lxw, Sepal.Lengthx.Width > 23)
```

:::

::: {.panel-tabset}

### Exercise

Read in the compensation dataset from the Beckerman book. Calculate the mean of root, grouped by grazing. I.e. calculate the mean of root for each grazing group.

In a second step, calculate the sum of root for each grazing group.

### Solution

```{r}
library(tidyverse)
compensation <- read_csv("compensation.csv")
glimpse(compensation)
aggregate(compensation$Root,list(compensation$Grazing),FUN=mean)
```
This function is computing the mean of root and grouping by the grazing treatment. The first argument in the function is the object we to compute. and the list function lists the grouping we want to use. In this case, there are two categories in the Grazing treatment. The aggregate function compute the mean (indicated by the FUN argument).

```{r}
aggregate(compensation$Root,list(compensation$Grazing),FUN=sum)
```
Here the computation is changed from mean to sum.

:::


## Checkpoint 3.3

::: {.panel-tabset}

### Exercise

Load the USArrests dataset and use the spearman correlation coefficient to show the correlations between the different arrest reasons parameters

### Solution

```{r}
USArrests
library(corrplot)
a <- cor(USArrests, method = "spearman")
corrplot(a, method="circle")
```

:::

::: {.panel-tabset}

### Exercise

Create a vector b ranging from 1 to 200 with 1.5 step size and create the three following vectors: 

- b_3 which is a +3
- b_square which is b to the power of 2/ squared
- b_log 
- b_complex  which is sin(b) * cos(4 * b)

### Solution

```{r}
b <- seq(1, 200, 1.5)
b_3 <- b+3
b_square <- b^2
b_log <- log(b)
b_complex <- sin(b) * cos(4 * b)
```
:::

::: {.panel-tabset}

### Exercise

Plot the relations of b and the above created 4 vectors in a plot with 4 panels. calculate pearson, spearman, and kendall for the four vectors.

### Solution
```{r}
par(mfrow = c(2, 2))
plot(b, b_3)
plot(b, b_square)
plot(b, b_log)
plot(b, b_complex, type = "l")
```

Pearson
```{r}
cor(tibble(b, b_3, b_square, b_log, b_complex), method = "pearson") |>  round(2)
```

Spearman
```{r}
cor(tibble(b, b_3, b_square, b_log, b_complex), method = "spearman") |>  round(2)
```

Kendall
```{r}
cor(tibble(b, b_3, b_square, b_log, b_complex), method = "kendall") |>  round(2)
```
:::


::: {.panel-tabset}

### Exercise

Calculate the means of the variables from the iris data package by
species and visualize with bar plots.

### Solution
```{r}
install.packages("ggpubr")
```


```{r}
library(tidyverse)
library(ggplot2)
library(ggpubr)

iris_sub <- iris %>%
  group_by(Species) %>% 
  summarise(SeL.mean=mean(Sepal.Length),SeW.mean=mean(Sepal.Width),
            PeL.mean=mean(Petal.Length),PeW.mean=mean(Petal.Width))

ggarrange(
  ggplot(data=iris_sub)+
    geom_bar(aes(x=Species,y=SeL.mean), stat="identity")+
    theme_bw(),
  ggplot(data=iris_sub)+
    geom_bar(aes(x=Species,y=SeW.mean), stat="identity")+
    theme_bw(),
  ggplot(data=iris_sub)+
    geom_bar(aes(x=Species,y=PeL.mean), stat="identity")+
    theme_bw(),
  ggplot(data=iris_sub)+
    geom_bar(aes(x=Species,y=PeW.mean),
             stat="identity")+
    theme_bw()
)
```

Note that the `ggpubr` creates "publication-ready" plots from ggplots. It is used to arrange the 4 plots on one panel.

Another solution would be to plot individually, using : 
```{r, eval = F}
ggplot(data=iris_sub)+
  geom_bar(aes(x=Species,y=SeL.mean), stat="identity")+
  theme_bw()

ggplot(data=iris_sub)+
  geom_bar(aes(x=Species,y=SeW.mean), stat="identity")+
  theme_bw()

ggplot(data=iris_sub)+
  geom_bar(aes(x=Species,y=PeL.mean), stat="identity")+
  theme_bw()

ggplot(data=iris_sub)+
  geom_bar(aes(x=Species,y=PeW.mean),
           stat="identity")+
  theme_bw()
```


:::




::: {.panel-tabset}

### Exercise

### Solution


:::

::: {.panel-tabset}

### Exercise

### Solution


:::

::: {.panel-tabset}

### Exercise

### Solution


:::

::: {.panel-tabset}

### Exercise

### Solution


:::


# Repetition of Module 4

## Checkpoint 4.1

::: {.panel-tabset}

### Exercise

Load the dataset iris and set the rownames as a continues species name. 

### Solution
```{r}
?iris
iris

iris <- tibble(Species = paste("species", seq(1, 150), sep = ""),
                      Sepal.Length = sample(c(4:8), 150, replace = T),
                      Sepal.Width = sample(c(2:5), 150, replace = T),
                      Petal.Length = sample(c(1:7), 150, replace = T),
                      Petal.Width = sample (c(0:3), 150, replace= T))
rownames(iris) <- iris |> pull(Species)
```
Note that on newer versions, tibbles can not get row names.

Instead, you can use data.frames : 
```{r}
iris <- data.frame(Species = paste("species", seq(1, 150), sep = ""),
                      Sepal.Length = sample(c(4:8), 150, replace = T),
                      Sepal.Width = sample(c(2:5), 150, replace = T),
                      Petal.Length = sample(c(1:7), 150, replace = T),
                      Petal.Width = sample (c(0:3), 150, replace= T))
rownames(iris) <- iris |> pull(Species)
head(iris)
```

:::

## Checkpoint 4.2

::: {.panel-tabset}

### Exercise

Check the data naming below taken from  a hypothetical folder. 
How could you organise this more cleanly?

dataNEW28Aug.xlxs
dataCurrent29Aug.csv
Scriptforcourse.R
Outline.doc
UPTODATEScriptforcourse29Aug.R

### Solution

data_2023_08_28.csv
data_2023_08_29.csv
course_script_NA.R
course_script_2023_08_29.R
Outline_2023_08_29.txt

:::


::: {.panel-tabset}

### Exercise

Navigating with relative filepaths. Your Working Directory is currently set in the first folder path. You want to load the data books from the second folder path. How do you go back to the folder with a relative filepath?

1: /users/charliechaplin/R/R_project1/Charlies_scripts
2: /users/charliechaplin/data/data_4_charlie

### Solution

`read.csv(../../../data/data_4_charlie/books.csv)`

:::


## Checkpoint 4.3

::: {.panel-tabset}

### Exercise

Use the tibble below to create an additional column with the variable response. The values in these should be linear to the value in column X by factor three and the the cubic of the value in column Y. Show the response variable with a line graph using ggplot2

```{r}
togo <- tibble(explanatory = sample(c(1:500), 2000, replace = T),
                   group = rep(c("X", "Y"), 1000))
```


### Solution

```{r}
togo <- togo |> 
  group_by(group) |> 
  mutate(response = case_when(group == "X" ~ explanatory * 3,  group == "Y" ~ explanatory ^4))

library(ggplot2)

ggplot(togo, aes(x = explanatory, y = response, colour = group)) +
  geom_line()
```

:::


::: {.panel-tabset}

### Exercise

### Solution

:::


# Outlook

## writing R output

After finishing an analysis or a plot, you certainly want to save some R output.

For plots, you can save via the RStudio Graphical User Interface (GUI) or via code.

### Saving plots via RStudio GUI

(1) Create your plot (2) click on "Export" on the top of the graphic panel. Save as image or as pdf. Note that you can select the output size. For PDF, select e.g. A5 landscape or A4, or the "device size" (the size your plot has on the graphic panel). For images, select the desired type, e.g. SVG for a vectorised image (which is not pixeled), or png for a pixel image. The with and height can be given manually as numbers, or manually be changing the preview size.
```{r}
library(ggplot2)
data(iris)
plot_iris <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +
  geom_point()
plot_iris
```

**Saving with code**

### Saving plots using the `ggplot2` package

Save **as png**
```{r, eval = F}
ggsave(plot_iris, 
       filename = "plot_iris_sepallength_sepalwidth.png",
       device = "png",
       width = 20, height = 20, units = "cm",
       dpi = 300)
```
Note that you can adjust the size of the image by setting width and height, e.g. in "cm". You can also chose inches "in" or pixels "px".

Further, you can set the image resolution in dpi (dots per inch). Often, journals require 300 dpi. Note that an image of 300 dpi quality takes up more memory than a usual R plot. The image quality suitable for showing on a screen is 72 dpi.


Save **as pdf**
```{r, eval = F}
ggsave(plot = plot_iris, 
       filename = "plot_iris_sepallength_sepalwidth.pdf",
       device = "pdf",
       width = 14.8, height = 21, units = "cm")
```
By using the with and height in cm arguments, you can e.g. write to an A5 format by specifying 14.8 cm width and 21 cm height which is the size of A5. Look up other paper formats if needed.


### Recommended : Saving plots using the `cowplot` package 

The `cowplot` package is a very useful plotting package. It not only allows you to print your plots easily to files, but it also helps you arranging then on a panel.
```{r}
# install.packages("cowplot")
library(cowplot)
```

Saving a plot as png, tiff or pdf
```{r, eval = F}
save_plot(plot = plot_iris,
          base_width = 14.8, base_height = 14.8, units = "cm",
          filename = "plot_iris_sepallength_sepalwidth.png",
          dpi = 72)

save_plot(plot = plot_iris,
          base_width = 14.8, base_height = 14.8, units = "cm",
          filename = "plot_iris_sepallength_sepalwidth.tiff",
          dpi = 72)

save_plot(plot = plot_iris,
          base_width = 14.8, base_height = 21, units = "cm",
          filename = "plot_iris_sepallength_sepalwidth.pdf")
```

#### various plots in one panel

Not only for saving is the `cowplot` package handy, but also to combine and label multiple plots on one panel. [This tutorial](https://cran.r-project.org/web/packages/cowplot/vignettes/introduction.html) gives an introduction, here you get a first impression:
```{r}
hist_sepallength <- ggplot(iris, aes(x = Sepal.Length)) +
  geom_histogram() +
  theme_half_open() # note that some people prefer a white background

hist_sepalwidth <- ggplot(iris, aes(x = Sepal.Width)) +
  geom_histogram() +
  theme_half_open()

lineplot_iris <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width)) +
  geom_point() +
  theme_half_open()
```
Gives you 3 individual plots.

Combine them on one panel by : 
```{r}
plot_grid(hist_sepallength, hist_sepalwidth, lineplot_iris,
          nrow = 2,
          labels = c("A", "B", "C"))
```

You can even combine plots which are already combined : 
```{r}
iris_histograms <- plot_grid(hist_sepallength, hist_sepalwidth,
          ncol = 2,
          labels = c("A", "B", "C"))
plot_grid(iris_histograms, lineplot_iris,
          nrow = 2,
          labels = c("", "C"))
```
As always, make sure you label the axes well with names and units (this is a bad example in this aspect).


### Writing datasets with Rbase (recommended)

```{r}
data(iris)
```

If you want to extract the iris dataset to a file on your computer, the functions look a bit similar than the reading functions. 

`write.csv` and `write.csv2` write csv files, either comma "," or semicolon ";" separated. These functions contains some unhandy default settings: We recommend specifying the `quote` argument to `FALSE`, to prevent quoting of all values in the output table. We also recommend setting the `row.names` argument to `FALSE`, to prevent printing a column of row numbers. Try out playing with those settings to find out exactly what they do. Remember to open the data files with your text editor to see exactly what happens. To just look at the values, you can open with Excel.
```{r, eval = F}
# comma-separated ","
write.csv(x = iris, file = "iris.csv",
          quote = F,
          row.names = F)  

# semicolon-separated ";"
write.csv2(x = iris, file = "iris.csv",
          quote = F,
          row.names = F)  
```


You can use the more generic `write.table` function, and set the separator yourself :
```{r, eval = F}
write.table(x = iris, file = "iris.csv",
            sep = ",",
            quote = F,
            row.names = F)
```
Using `sep = ","` writes a comma-separated file, using `sep = ";"` creates a semicolon-separated file. You can also use other separators, e.g. tab by setting `sep = "\t"`


#### Writing intermediate data

R has two internal data formats, which you can use : `.RData` and `.RDS`. Both of these file types are R-specific. While `.RDS` files are used to store single R objects, `.RData` files can save multiple objects. If you use those files a lot, you might want to read more about their differences. For now, I recommend using `.RDS` files because they ease a reproducible workflow (they can be assigned to a new names when reading in, see [D.4.1 Saving R Files in this book](https://rstudio-education.github.io/hopr/dataio.html)).

You can save a file using `saveRDS()` and read a .RDS file using `readRDS`.
```{r, eval = F}
saveRDS(object = iris, file = "iris.RDS")
rm(iris) # remove the iris object
iris <- readRDS("iris.RDS")
```
Note that .RDS files are not readable with Excel or Text editors, but only with R. Why should you then bother to create .RDS files? You might consider 2 reasons (amongst others) 

- (1) You can save the type of data in .RDS files, not just the values itself. If you save a tibble as .RDS, it is still a tibble when you read it in. If you save a matrix as .RDS file, it is still a matrix when you read it in.
- (2) Probably your R script generates different types of output. Some things, you might want to save for your manuscript. Other output might just be intermediate output, which is not in table format, as e.g. the output of many statistical modelling functions. You might want to save this output as a backup, and here .RDS files are useful. In this way, you can also clearly distinguish between intermediat output (.RDS) and "final output" (.csv and .pdf/.png).






