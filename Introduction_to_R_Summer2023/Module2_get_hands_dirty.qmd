---
title: "Module2 : Getting your hands dirty"
author: "N. V. Schenk"
format: 
    html:
      toc: true
      self-contained: true
editor: source
execute: 
  cache: true
---


```{r}
#| label: requirements
#| include: false
# load and install necessary R packages
# This is not shown in the html script.

# install necessary R packages
if(!require(dplyr)) install.packages("tidyverse")
# if(!require(cowplot)) install.packages("cowplot")

# load necessary R packages
library(tidyverse)
```


This document describes Module 2 of the course "Introduction to R", held in Summer 2023 for the [Biodiversity Exploratories](www.biodiversity-exploratories.de).

# Learning outcome

- introduction to data visualisation
- import data into R


:::{.callout-tip}
In order to learn coding, you need to code
:::



## Content

This Module focuses on data visualisation with ggplot, and data import to R. You can chose with which part to start, depending e.g. on your engery level: Data import is usually a bit more tricky, and visualisation more rewarding.



# 1.1 Data Visualisation I : overview and play

You have already created some plots in R, using the `plot` function from base R, and the `ggplot` function from the `ggplot2` package.

This chapter will take you through some visualisation techniques R can offer. The code below includes some more advanced R commands. Depending on your previous knowledge, you are absolutely not expected to understand each line of code. The goal of this chapter is (1) to practice running code that looks complicated, and (2) to experience some workflow in R, and to (3) hopefully motivate you to keep on track.

Please just copy and paste the code to your script or console, and experience what happens.


### R base plotting

Without loading any visualisation package, R alone can create nice graphs. This chapter will show you how to create a scatterplot. The examples are taken from [sthda](http://www.sthda.com/english/wiki/scatter-plots-r-base-graphs#d-scatter-plots)

R has some in-built datasets. Load the dataset `mtcars` :
```{r}
data("mtcars")
```
In order to get familiar with the dataset and what it is about, read (quickly) the information provided in the help function : 
```{r}
help(mtcars)
```
Print out the first 10 columns of the dataset, by using : 
```{r}
head(mtcars)
```

Create a scatter plot by running all the lines from the following code block: 
```{r}
x <- mtcars$wt
y <- mtcars$mpg
# Plot with main and axis titles
# Change point shape (pch = 19) and remove frame.
plot(x, y, main = "Main title",
     xlab = "X axis title", ylab = "Y axis title",
     pch = 19, frame = FALSE)
# Add regression line
abline(lm(y ~ x, data = mtcars), col = "blue")
```

Can you see a scatterplot appearing in RStudio?

You can modify parts of the plot, by modifying parts of the code above. See what happens if we change the last line : We exchange the word "blue" with the word "red".

```{r}
x <- mtcars$wt
y <- mtcars$mpg
# Plot with main and axis titles
# Change point shape (pch = 19) and remove frame.
plot(x, y, main = "Main title",
     xlab = "X axis title", ylab = "Y axis title",
     pch = 19, frame = FALSE)
# Add regression line
abline(lm(y ~ x, data = mtcars), col = "red")
```

What happens? The color of the regression line changes from blue to red.

::: {.panel-tabset}

### Exercise

Change the color of the regression line to pink.

### Hint

To do so, again run all the above lines, modifying only the last row.

### Solution

```{r}
x <- mtcars$wt
y <- mtcars$mpg
# Plot with main and axis titles
# Change point shape (pch = 19) and remove frame.
plot(x, y, main = "Main title",
     xlab = "X axis title", ylab = "Y axis title",
     pch = 19, frame = FALSE)
# Add regression line
abline(lm(y ~ x, data = mtcars), col = "pink")
```

:::

You see, by modifying just parts of the original code, you can modify parts of the plot. Usually, the parts you can easiest modify are the colors and the titles (plot titles and axes titles).



::: {.panel-tabset}

### Exercise

Try to modify the title of the plot, naming it "New title" (or any other name you feel like). To do so, run all the code lines from the above code block again, adding a modification in only one of the lines.


### Hint

The current title of the plot is "Main title". Check the above block of code for the words "Main title". Closely inspect the fifth line (line 5 of the code block).

### Solution

```{r}
x <- mtcars$wt
y <- mtcars$mpg
# Plot with main and axis titles
# Change point shape (pch = 19) and remove frame.
plot(x, y, main = "New title",
     xlab = "X axis title", ylab = "Y axis title",
     pch = 19, frame = FALSE)
# Add regression line
abline(lm(y ~ x, data = mtcars), col = "blue")
```

:::


Play around with this plot, changing the title and the color of the regression line, maybe even more parameters.

Above, you learned that the parts you can easiest modify are the colors and the titles (plot titles and axes titles). Did you observe that the titles are all highlighted in the same color?



**Additional : ** 

In the [sthda tutorial](http://www.sthda.com/english/wiki/scatter-plots-r-base-graphs#d-scatter-plots), you find instruction to do a 3D scatterplot. Follow those instructions.


### Additional : Contour plots

Run the below code to generate a nice colorful plot of the Manuga Whau volcano in Auckland.
```{r}
data("volcano")
library(grDevices)
library(graphics)
# note : in case you get a warning when loading the above packages, install them using : 
#    install.packages("grDevices")
#    install.packages("graphics")
filled.contour(volcano, color.palette = terrain.colors, asp = 1)
title(main = "volcano data: filled contour map")
```

You find a description of the dataset [here](https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/volcano.html) and by running `help(volcano)`.


### plotting with ggplot2

`ggplot2` is a powerful and often used package for visualisation. Below you find an example of a ggplot.

Run the code and inspect the plot you just created.

Step 1 : create a data frame, a table of data which is used for plotting. In R, you can create such tables using the below code : 
```{r}
set.seed(1234)
wdata = data.frame(
        gender = factor(rep(c("F", "M", "D"), each=200)),
        weight = c(rnorm(200, 55), rnorm(200, 58), c(rnorm(100, 55), rnorm(100, 58))))
head(wdata)
```
You just created a table (R calls this format a `data.frame`), which stores information of 200 persons gender and weight.

The below code creates a boxplot
```{r}
library(ggplot2)
# Basic box plot from data frame
ggplot(data = wdata, aes(x = gender, y = weight, fill = gender)) + 
         geom_boxplot()
```

The below code creates a violin plot
```{r}
ggplot(data = wdata, aes(x = gender, y = weight, fill = gender)) + 
         geom_violin()
```


::: {.panel-tabset}

### Exercise

Create a plot of the dataset "wdata", by recycling the code from the boxplot, replacing "geom_boxplot()" with "geom_point()"


### Solution

```{r}
# Basic bar plot from data frame
ggplot(data = wdata, aes(x = gender, y = weight, fill = gender)) + 
         geom_point()
```

:::

You see, that coding (especially plotting) can consist of copy-pasting code from the internet. A great source of different types of plots, which you can usually easily recreate is the [R Graph Gallery](https://r-graph-gallery.com/). This website works as a gallery. You can surf through and select a plot you would like to create (usually with your own data).

Let's try it out, and recreate this [Basic ridgeline plot](https://r-graph-gallery.com/294-basic-ridgeline-plot.html#color). Please click on the link and read the introductory words. Then, copy paste the code from the website, or from below (it's the same code).
```{r}
# library
library(ggridges)
library(ggplot2)
 
# Diamonds dataset is provided by R natively
#head(diamonds)
 
# basic example
ggplot(diamonds, aes(x = price, y = cut, fill = cut)) +
  geom_density_ridges() +
  theme_ridges() + 
  theme(legend.position = "none")
```


**Additional** : create more plots from this [sthda](http://www.sthda.com/english/wiki/be-awesome-in-ggplot2-a-practical-guide-to-be-highly-effective-r-software-and-data-visualization) tutorial, or from the [R Graph Gallery](https://r-graph-gallery.com/).



::: {.callout-tip icon=false}

### Checkpoint 2.1

Please invent and write down 1-2 exercises including solutions about the past section. You can slightly modify one of the above or the book exercises, or think about a new one.

Submit the exercises via ILIAS.

I will collect the exercises of everyone during the course, and provide them to you for the last module.

:::


# 1.2 Data Visualisation II : learning the basics

Please work through Chapter 2 of R4DS, and solve the book exercises after. Note that you find solutions [here](https://r4ds-solutions.nhsrcommunity.com/). Record any topics you have difficulties to understand, or where you wish to get more input.


::: {.panel-tabset}

### Exercise

Visualise the distribution of the numerical varialbe "Sepal.Length" from the dataset `iris` with a histogram.

```{r}
data(iris)
head(iris)
```

### Solution

```{r}
ggplot(iris, aes(x = Sepal.Length)) +
  geom_histogram(binwidth = 0.5)
```

:::



::: {.callout-tip icon=false}

### Checkpoint 2.2

Please invent and write down 1-2 exercises including solutions about the past section. You can slightly modify one of the above or the book exercises, or think about a new one.

Submit the exercises via ILIAS.

I will collect the exercises of everyone during the course, and provide them to you for the last module.

:::



# 2.1 Data import

Please work through Chapter 2.1 of Beckerman. As always, record any topics you have difficulties to understand, or where you wish to get more input.

Once you reach Chapter 2.2, only read the first small paragraph on page 40. When you reach page 41, follow the important note below.

:::{.callout-important}
When you reach page 41, I recommend you create a different folder for the course than recommended in the book. I recommend you create a folder : "Intro_to_R" instead of "MyFirstAnalysis" (or use the folder you have already created). Make sure the folder name does NOT contain any whitespace (space, like this " "). Then proceed as recommended in the book, creating a folder "analyses" and a folder "datasets" within this folder. Make sure you EITHER use a capital letter as first letter ( like in "Analyses") or not (like in "analyses"). It does not matter if you use a capital letter or not, but it matters that you take this decision conciously, because R is what is called **case sensitive**. That means, the word "Analysis" is NOT the same as the word "analysis". Note that you find an example below.
:::

Now, read Chapter 2.2.1. From paragraph 2.2.2 on, the book will show you four methods of importing data. Note that the below example (which we treated in the introduction) is not mentioned in detail. I therefore recommend you work through this example again, before reading Chapter 2.2.2 and so on.


## Example data import

The following folders are created: `Documents/Intro_to_R_course/analyses` and `Documents/Intro_to_R_course/datasets`. 

Save all the 46 datasets mentioned in the book (download from [here]()) in the folder `Documents/Intro_to_R_course/datasets`.

Following the instructions from the book, the following file is created : A file called "DataImportExample.R" which is stored in the "analyses" folder. In other words, the following file is created : `Documents/Intro_to_R_course/analyses/DataImportExample.R`. It is an R script, which contains the following content : 
```{r}
# Amazing R User (your name)
# 17 August, 2023
# This is my first attempt to import data into R.
# No R packages are required.

```

Identify the dataset `compensation.csv` in the folder `Documents/Intro_to_R_course/datasets`, to check if it is there. If you want, you can open it with Excel and look at it.

In the book, there is an example about the import dataset tool and the `file.choose()` function. The example here does not cover the `file.choose()` option, but skips Chapter 2.2.2 and 2.2.3, jumping to Chapter 2.2.4.

**Setting the working directory** : We now have to set the working directory for R, that means, we have to tell R where it needs to look for datasets.

We can check the current working directory (where is R at the moment?) like this : 
```{r}
getwd()
```
The command prints out a working directory, in my case it is : `"/home/novalid/Documents/github/Synthesis_courses_workshops"`. It will look slightly different for you if you do not work with a Linux Operation system. But the main parts are the same. The working directory tells me, that I am working in a computer, within a user called "novalid", in a folder called "Documents", in a subfolder called "github" and in a sub-sub-folder called "Synthesis_courses_workshops".

In Windows operation systems, the path usually looks somewhat like this : `C:/Users/username/Documents` or this `C:\Users\username\Documents` and so on. The important part is, the path starts with **C:**, because in windows systems, we usually work in a file partition called "C". (In case you work on a different partition, use the respective letter, e.g. D:/ or T:/)

In Mac operation systems, the path usually look somewhat like this : 
`/Users/username/Documents`.

You will agree that the example path "/home/novalid/Documents/github/Synthesis_courses_workshops" is not the same place as `Documents/Intro_to_R_course/datasets`.

That means, I have to change the current working directory to the place I want R to look for datasets, which is `Documents/Intro_to_R_course`

To do so, I can use the function `setwd()`. The good news is, that RStudio has a feature called "tab-completion". That means, if you start typing a word in the console or within a script, you can press "Tab" (the right arrow on your keyboard), and RStudio suggests you how you could complete the word you just started typing.

Try this out if you don't know tab completion yet : 

### Experiencing tab-completion in RStudio

Create a vector of numbers from 3 to 9 with step size of 0.2, called `a_very_very_long_variable_name_which_takes_a_long_time_to_type`.
```{r}
a_very_very_long_variable_name_which_takes_a_long_time_to_type <- seq(3, 9, 0.2)
```
When you want to print the vector to the console, you usually type the name of the vector and press enter : 
```{r}
a_very_very_long_variable_name_which_takes_a_long_time_to_type
```
Now, in your new script "DataImportExample.R" try typing just the beginning of the vector, and press Tab, and see what happens.

You should observe a very little window showing the whole long name appearing after you started typing the name of the vector. When you press Tab, the whole name is completed immediately.

Now that you have experienced the "tab-completion" function of RStudio, we are ready to set the working directory of the file "DataImportExample.R". 


### Data import in R part 2

Within the file "DataImportExample.R", type the following, depending on your operation system : 
- working on Mac OS : type `setwd("/Users/`
- on Windows : type `setwd("C:/` or `setwd("C:\`
- on Linux : type `setwd("~/` (note that the "~" is a special character used in Linux systems to make your life easier.)

You should now see that RStudio is already suggesting you folders. Try navigating along the file path to find the course folders with the datasets. In this examples, it is : `Documents/Intro_to_R_course/datasets`. In my Linux OS, I can click (or select and "Tab") "Documents". Either the little "tab-completion" window is still open after chosing "Documents", or you click "Tab" again to chose the folder "Intro_to_R_course".

In my operating system, I just created the following R command : `setwd("~/Documents/Intro_to_R_course/datasets")`. Click "Enter" to run the command.

Congratulations, you just set your working directory to where the datasets are stored!

Now, we can use the function `read.csv()` to import our first dataset!

Try running : 
```{r}
#| code-overflow: wrap
compensation <- read.csv("compensation.csv")
```

Now, the file "compensation.csv" is stored in a variable called `compensation`. You can look at the first ten lines of the new table as following : 
```{r}
head(compensation)
```

Very good.


## Beckermann Ch 2.2.2 - End

Now, work through Beckermann Chapter 2.2.2 until the end of 2.5 (excluding the Appendix). You will now see four more options to import data into R. Don't worry if you do not get all of them, data import is sometimes hard to understand. It's one of these topics you just have to practice a lot, and learn by doing. For now, it's absolutely fine if you still don't really understand WHAT you are doing, the goal is that after this lecture, you have a PROCEDURE that works more or less. Read the discussion point below before starting to read Chapter 2.2.2. If you run into problems, consider the troubleshooting chapter 2.4 or ask me.


::: {.callout-note icon=false}

### Discussion point data import

Please record your difficulties of data import. Try to figure out pro and contra points for the different data import methods. Try to find a favorite method and be ready to report in our discussion of module 2. (Note that the import function `read_csv` from the next section is part of this discussion point as well.)

:::


# 2.2 Data import with `tidyverse`

This course covers an introduction to the `tidyverse` package group, and this package group has a data import function `read_csv`. It is introduced in Chapter 8 of R4DS, however, the chapter already uses some data processing functions and could therefore still be a bit advanced. We will nevertheless get to know the `read_csv` function right now.

Please read the beginning of Chapter 8 of R4DS, only the first part until the chapter 8.2.1 starts (don't read 8.2.1). Solve the below exercises after.

::: {.panel-tabset}

### Exercise

Use the `read_csv` function to read in the dataset "compensation.csv". Record what happens.

### Solution

```{r}
compensation <- read_csv("compensation.csv")
```

The dataset is read in. The function `read_csv` gives more output, it e.g. mentions that the column types are not specified. For the moment, we ignore this warning (and we will cover data types in detail later), and check if the dataset looks okay : 

```{r}
head(compensation)
```
As you just learned, you can also use the `glimpse` function : 
```{r}
glimpse(compensation)
```

The output of the head function looks slightly different as well. This is because the dataset is read in with a function from the `tidyverse` package group, and the table of data is stored as an object called "tibble". This is additional information, the goal here is that you are able to read in the data.

:::


## Missing values

::: {.panel-tabset}

### Exercise

This exercise is about missing data. As you learned, missing observations are ideally encoded as "NA" in the data files.

Open the dataset "compensation.csv" with Excel, and replace a random number with "NA". Save the changed dataset as "compensation_NA.csv".

Import this dataset using the `read_csv()` function. Inspect the dataset and record what happens with the "NA" value you have manually added.

### Hint

You can inspect a dataset with the following commands : 
```{r}
compensation # shows the first 10 rows of a datast imported with tidyverse (called a "tibble")
print(compensation) # does the same as above
print(compensation, n = 30) # prints out the first 30 rows
print(compensation, n = 300) # prints the first 300 rows, but the dataset only has 40 rows, so only those 40 rows are shown.

glimpse(compensation)

View(compensation) # show the dataset as a new tab in the Viewer of RStudio
```


### Solution

```{r}
compensation_NA <- read_csv("compensation_NA.csv")
# use one of the methods described under hints to show the dataset, e.g.
View(compensation_NA)
```

The missing values are shown as "NA". In the console, they are highlighted in red, in the viewer they are highlighted in grey.


:::


::: {.panel-tabset}

### Exercise

Repeat the above exercise with the following variation: this time, create a copy of the "compensation.csv" dataset, open with e.g. Excel and delete two random values. Save the new dataset as "compensation_empty.csv". Import it, look at it and report what happens at the places where you inserted the missing values.

### Solution

```{r}
compensation_empty <- read_csv("compensation_empty.csv")
print(compensation_empty, n = 40)
```

The function read_csv correctly interpreted the missing values as NA.

:::

::: {.panel-tabset}

### Exercise

Repeat the above exercise with the following variation: this time, create a copy of the "compensation.csv" dataset, open with e.g. Excel and delete two random values and replace them with "NM" (an abbreviation which is sometimes used to indicate Not Measured values). Save the new dataset as "compensation_NM.csv". Import it, look at it and report what happens at the places where you inserted the missing values.

### Solution

```{r}
compensation_NM <- read_csv("compensation_NM.csv")
print(compensation_NM, n = 10)
```

The function read_csv does not any more correctly interpreted the missing values as NA.

:::



:::{.callout-important}
The `read_csv()` function interprets characters "NA" and "" (no entry, empty) correctly as NA values. Any other entry is not correctly read in as NA character. We recommend to ALWAYS indicate missing values as NA.
:::



::: {.callout-tip icon=false}

### Checkpoint 2.3

Please invent and write down 1-2 exercises including solutions about the past section. You can slightly modify one of the above or the book exercises, or think about a new one.

Submit the exercises via ILIAS.

I will collect the exercises of everyone during the course, and provide them to you for the last module.

:::

